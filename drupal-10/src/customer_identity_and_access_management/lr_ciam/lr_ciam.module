<?php

/**
 * @file
 * Enables the use of personal and site-wide contact forms.
 */

use Drupal\Core\Database\Database;
use Drupal\block\Entity\Block;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\Core\Url;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Drupal\Core\Routing\TrustedRedirectResponse;
use Drupal\Core\Entity\EntityTypeInterface;
use LoginRadiusSDK\Utility\Functions;
use LoginRadiusSDK\CustomerRegistration\Advanced\ConfigurationAPI;
use LoginRadiusSDK\CustomerRegistration\Advanced\MultiFactorAuthenticationAPI;
use LoginRadiusSDK\CustomerRegistration\Authentication\AuthenticationAPI;
use LoginRadiusSDK\CustomerRegistration\Account\AccountAPI;
use LoginRadiusSDK\CustomerRegistration\Account\SottAPI;
use LoginRadiusSDK\CustomerRegistration\Social\SocialAPI;
use Drupal\Core\Session\AccountInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\user\UserInterface;
use LoginRadiusSDK\LoginRadiusException;

\Drupal::moduleHandler()->loadInclude('lr_ciam', 'php', 'customhttpclient');
\Drupal::moduleHandler()->loadInclude('lr_ciam', 'php', 'ciam_lang');
global $apiClientClass;
$apiClientClass = 'CustomHttpClient';

$config = \Drupal::config('lr_ciam.settings');
$api_key = trim((string) $config->get('api_key'));
$api_secret = trim((string)  $config->get('api_secret'));
$api_request_signing = $config->get('api_request_signing');
 
if($api_key != ''){
define('LR_API_KEY', $api_key);
}
if($api_secret != ''){
$decrypted_secret_key = encrypt_and_decrypt( $api_secret, $api_key, $api_key, 'd' );  
define('LR_API_SECRET', $decrypted_secret_key);
}

if($api_request_signing == 'true') {
  define('API_REQUEST_SIGNING', true);
}
define('API_CONFIG_DOMAIN', 'https://config.lrcontent.com');


  /**
  * Encrypt and decrypt
  *
  * @param string $string string to be encrypted/decrypted
  * @param string $action what to do with this? e for encrypt, d for decrypt
  */
     
  function encrypt_and_decrypt( $string, $secretKey, $secretIv, $action) {
    // you may change these values to your own
    $secret_key = $secretKey;
    $secret_iv = $secretIv;
    $output = false;
    $encrypt_method = "AES-256-CBC";
    $key = hash( 'sha256', (string) $secret_key );
    $iv = substr( hash( 'sha256', (string) $secret_iv ), 0, 16 );
    if( $action == 'e' ) {
    $output = base64_encode( openssl_encrypt( $string, $encrypt_method, $key, 0, $iv ) );
    }
    else if( $action == 'd' ){       
    $output = openssl_decrypt( base64_decode( (string) $string ), $encrypt_method, $key, 0, $iv );
    }
    return $output;
  }

/**
 * Implements hook_theme().
 */
function lr_ciam_theme() {

  $path =\Drupal::service('extension.path.resolver')->getPath('module', 'lr_ciam'). '/theme';
  $theme = [
    'user_login_form' => [
      'template' => 'user_login_form',
      'render element' => 'form',
      'path' => $path,
    ],
    'user_login' => [
      'template' => 'user_login',
      'render element' => 'form',
      'path' => $path,
    ],
    'user_register' => [
      'template' => 'user_register',
      'render element' => 'form',
      'path' => $path,
    ],
    'user_register_form' => [
      'template' => 'user_register_form',
      'render element' => 'form',
      'path' => $path,
    ],
    'set_password' => [
      'template' => 'set_password',
      'render element' => 'form',
      'path' => $path,
    ],
    'change_password' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'change_password',
      'path' => $path,
    ],
    '2fa_container' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => '2fa_container',
      'path' => $path,
    ],
    'lr_profile_editor' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'lr_profile_editor',
      'path' => $path,
    ],
    'lr_update_phone' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'lr_update_phone',
      'path' => $path,
    ],
    'lr_backup_codes' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'lr_backup_codes',
      'path' => $path,
    ],
    'remove_email' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'remove_email',
      'path' => $path,
    ],
    'add_email' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'add_email',
      'path' => $path,
    ],
    'user_pass_form' => [
      'template' => 'user_pass_form',
      'render element' => 'form',
      'path' => $path,
    ],
    'user_pass' => [
      'template' => 'user_pass',
      'render element' => 'form',
      'path' => $path,
    ],
    'ciam_social_widget_container' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'ciam_social_widget_container',
      'path' => $path,
    ],
    'lr_ciam_linked' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'lr_ciam_linked',
      'path' => $path,
    ],
    'lr_ciam_popup' => [
      'variables' => [
        'params' => NULL,
      ],
      'template' => 'lr_ciam_popup',
      'path' => $path,
    ],
    'lr_loading' => [
      'template' => 'lr_loading',
      'variables' => [
        'params' => NULL,
      ],
      'path' => $path,
    ],
    'lr_message' => [
      'template' => 'lr_message',
      'variables' => [
        'params' => NULL,
      ],
      'path' => $path,
    ],
  ];
  return $theme;
}

/**
 * Added Required variable to use in template fie.
 *
 * @param array $vars
 */
function template_preprocess_lr_ciam_linked(&$vars) {
  global $base_url;
  $vars['image_url'] = $base_url . '/' . Drupal::service('extension.path.resolver')->getPath('module', 'lr_ciam'). '/images';
  $vars['callback'] = lr_ciam_get_callback_url();
}

/**
 * Show and hide user pass form block.
 */
function template_preprocess_user_pass(&$variables) {
  $config = \Drupal::config('lr_ciam.settings');
  $variables['api_key'] = trim((string) $config->get('api_key'));

  $blocks = Block::loadMultiple();
  foreach ($blocks as $key => $block) {
    $settings = $block->get('settings');
    if ($key == 'userforgotpasswordblock') {
      $block_settings = [];
      $block_settings = $settings;
    }
  }
  $variables['link_login'] = isset($block_settings['forgot_block_link_login']) ? $block_settings['forgot_block_link_login'] : '';
  $variables['link_register'] = isset($block_settings['forgot_block_link_register']) ? $block_settings['forgot_block_link_register'] : '';
  if (!\Drupal::currentUser()->isAnonymous()) {
    $variables['showpassonlogin'] = FALSE;
  }
  else {
    $variables['showpassonlogin'] = TRUE;
  }
}

/**
 * Show and hide user pass form.
 *
 * @param variables $array
 */
function template_preprocess_user_pass_form(&$variables) {
  $config = \Drupal::config('lr_ciam.settings');
  $variables['api_key'] = trim((string) $config->get('api_key'));
  if (!\Drupal::currentUser()->isAnonymous()) {
    $variables['showpassonlogin'] = FALSE;
    $variables['rendered'] = \Drupal::service('renderer')->render($variables['form']);
  }
  else {
    $variables['showpassonlogin'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lr_ciam_form_user_pass_form_alter(&$form, FormStateInterface $form_state) {
   if (!\Drupal::currentUser()->isAnonymous()) {
    $user = \Drupal::currentUser();
    $form['name']['#type'] = 'value';
    $form['name']['#value'] = $user->getEmail();
    $form['mail'] = [
      '#prefix' => '<p>',
      '#markup' => t('Password reset instructions will be mailed to %email. You must log out to use the password reset link in the email.', ['%email' => $user->getEmail()]),
      '#suffix' => '</p>',
    ];

    $form['actions'] = ['#type' => 'actions'];
    $form['actions']['submit'] = ['#type' => 'submit', '#value' => t('Submit')];
    $form['#cache']['contexts'][] = 'url.query_args';
    return $form;
  }
}

/**
 * Add variable to register form.
 *
 * @param array $variables
 */
function template_preprocess_user_register_form(&$variables) {
    $variables['admin_access'] = TRUE;
    $user = \Drupal::currentUser()->getRoles();

    if (in_array("administrator", $user)) {
        $variables['admin_access'] = FALSE;
    }
      
  $config = \Drupal::config('lr_ciam.settings');
  $variables['api_key'] = trim((string) $config->get('api_key'));
  $variables['rendered'] = \Drupal::service('renderer')->render($variables['form']);
}

/**
 * Add variable to user register form block.
 *
 * @param array $variables
 */
function template_preprocess_user_register(&$variables) {
  $variables['admin_access'] = TRUE;
  $user = \Drupal::currentUser()->getRoles();
  if (in_array("administrator", $user)) {     
    $variables['admin_access'] = FALSE;
  }
  $config = \Drupal::config('lr_ciam.settings');
  $blocks = Block::loadMultiple();
  foreach ($blocks as $key => $block) {
    $settings = $block->get('settings');
    if ($key == 'userregisterblock') {
      $block_settings = [];
      $block_settings = $settings;
    }
  }

  $variables['link_login'] = isset($block_settings['register_block_link_login']) ? $block_settings['register_block_link_login'] : '';
  $variables['link_forgot'] = isset($block_settings['register_block_link_forgot']) ? $block_settings['register_block_link_forgot'] : '';
  $variables['api_key'] = trim((string) $config->get('api_key'));
  $variables['rendered'] = \Drupal::service('renderer')->render($variables['form']);
}

/**
 * Add variable to user login form.
 *
 * @param array $variables
 */
function template_preprocess_user_login_form(&$variables) {
  $config = \Drupal::config('lr_ciam.settings');
  $variables['api_key'] = trim((string) $config->get('api_key'));
}

/**
 * Add variable to user login form block.
 *
 * @param $variables
 */
function template_preprocess_user_login(&$variables) {
  $config = \Drupal::config('lr_ciam.settings');
  $blocks = Block::loadMultiple();
  foreach ($blocks as $key => $block) {
    $settings = $block->get('settings');
    if ($key == 'userloginblock') {
      $block_settings = [];
      $block_settings = $settings;
    }
  }

  $variables['api_key'] = trim((string) $config->get('api_key'));
  $variables['link_register'] = isset($block_settings['login_block_link_register']) ? $block_settings['login_block_link_register'] : '';
  $variables['link_forgot'] = isset($block_settings['login_block_link_forgot']) ? $block_settings['login_block_link_forgot'] : '';
}

/**
 * Get provider name.
 *
 * @param object $userprofile
 * @param string $token
 */
function lr_ciam_add_loginradius_userdata($userprofile, $token) {
  $provider = isset($userprofile->Provider) ? $userprofile->Provider : '';
  \Drupal::service('session')->set('provider', $provider);
}

/**
 * Implements hook_page_attachment().
 */
function lr_ciam_page_attachments(&$page) {
 
  $config = \Drupal::config('lr_ciam.settings');
    $emailVerificationUrl  = Url::fromRoute('<front>')->setAbsolute()->toString();
    $resetPasswordUrl = Url::fromRoute('user.login')->setAbsolute()->toString(); 
   
  if (isset($_COOKIE['lr_message']) && $_COOKIE['lr_message'] != '') {
    $sec = $config->get('ciam_notification_timeout_setting');
    $refresh_sec = (isset($sec) && $sec != '' && $sec != '0') ? $sec : '5';
    $resStatus = \Drupal::request()->query->get('lrresponse');
   
    $message = isset($_COOKIE['lr_message']) ? $_COOKIE['lr_message'] : '';
    $response = (isset($resStatus) && $resStatus != 'true') ? "error" : "success";
    setcookie("lr_message", "", time() - 3600, "/");
    if ($message != "") {
      if ($response == 'error') {
        \Drupal::messenger()->addError($message);       
      }
      else {
        \Drupal::messenger()->addStatus($message);        
      }
    }
    if ($refresh_sec != '' && $refresh_sec != '0') {
      header("refresh:5;url=".$resetPasswordUrl);   
    }
  }

  $route_name = \Drupal::routeMatch()->getRouteName();
  $anonymous = \Drupal::currentUser()->isAnonymous();
  $admin_route = \Drupal::service('router.admin_context')->isAdminRoute();

  $email_verify_route = ($route_name == 'view.frontpage.page_1');
  $login_route = ($route_name == 'user.login');
  $register_route = ($route_name == 'user.register');
  $forgot_password = ($route_name == 'user.pass');
  $logout_route = ($route_name == 'system.403');

  $path = parse_url(Url::fromRoute('<front>')->toString());
  $sso_path = $path['path'];
  $loggedIn = FALSE;
  if (\Drupal::currentUser()->isAuthenticated()) {
    $loggedIn = TRUE;            
  }
  
   // Don't load page attachments on admin pages.
    if(!$loggedIn) {
        if ($admin_route || ($anonymous && !($email_verify_route || $login_route || $register_route || $forgot_password || $logout_route))) {
          return;
        }
    } else {
        $user = \Drupal::currentUser()->getRoles();
        if (in_array("administrator", $user)) { 
          $page['#attached']['library'][] = 'lr_ciam/drupal.ciam_admin';
        }
    }
 
  $access_token = [];
  $lrPhoneId = [];
  if (!$anonymous && $session = \Drupal::service('session')) {
    $access_token = $session->get('access_token', []);
    $lrPhoneId = $session->get('user_profile_phoneId', []);
  }

  $my_settings = [
    'verificationUrl' => $emailVerificationUrl,
    'resetPasswordUrl' => $resetPasswordUrl,
    'loggedIn' => $loggedIn,
    'accessToken' => isset($access_token) ? $access_token : '',
    'phoneId' => isset($lrPhoneId) ? $lrPhoneId : '',
    'appName' => trim((string) $config->get('sso_site_name')),
    'apiKey' => trim((string) $config->get('api_key')),
    'autoHideTime' => trim((string) $config->get('ciam_notification_timeout_setting')),
    'appPath' => trim((string) $sso_path),
    'callback' => urldecode(lr_ciam_get_callback_url()),
    'home' => Url::fromRoute('<front>')->setAbsolute()->toString(),
  ];

  if ($config->get('ciam_terms_and_condition_html') != '') {
    $string = $config->get('ciam_terms_and_condition_html');
    $string = str_replace(array('<script>', '</script>'), '', $string['value']);
    $string = trim((string) str_replace('"', "'", $string));
    $terms = str_replace(array("\r\n", "\r", "\n"), " ", $string);
    $my_settings['termsAndConditionHtml'] = trim((string) $terms);
  }
  if ($config->get('ciam_ask_required_fields_on_traditional_login') != '' && $config->get('ciam_ask_required_fields_on_traditional_login') != 'false') {
    $my_settings['askRequiredFieldForTraditionalLogin'] = (boolean) $config->get('ciam_ask_required_fields_on_traditional_login');
  }
  if ($config->get('ciam_display_password_strength') != '' && $config->get('ciam_display_password_strength') != 'false') {
    $my_settings['displayPasswordStrength'] = (boolean) $config->get('ciam_display_password_strength');
  }
  if ($config->get('ciam_ask_email_for_unverified_user_login') != '' && $config->get('ciam_ask_email_for_unverified_user_login') != 'false') {
    $my_settings['askEmailForUnverifiedProfileAlways'] = (boolean) $config->get('ciam_ask_email_for_unverified_user_login');
  }
  if ($config->get('ciam_user_name_login') != '' && $config->get('ciam_user_name_login') != 'false') {
    $my_settings['usernameLogin'] = (boolean) $config->get('ciam_user_name_login');
  }
  if ($config->get('ciam_prompt_password_on_social_login') != '' && $config->get('ciam_prompt_password_on_social_login') != 'false') {
    $my_settings['promptPasswordOnSocialLogin'] = (boolean) $config->get('ciam_prompt_password_on_social_login');
  }
  if ($config->get('ciam_welcome_email_template') != '') {
    $my_settings['welcomeEmailTemplate'] = $config->get('ciam_welcome_email_template');
  }
  if ($config->get('ciam_email_verification_template') != '') {
    $my_settings['verificationEmailTemplate'] = $config->get('ciam_email_verification_template');
  }
  if ($config->get('ciam_reset_password_email_template') != '') {
    $my_settings['resetPasswordEmailTemplate'] = $config->get('ciam_reset_password_email_template');
  }
  if ($config->get('ciam_sms_template_2fa') != '') {
    $my_settings['smsTemplate2FA'] = $config->get('ciam_sms_template_2fa');
  }

  $configSettings = lr_ciam_get_config_option();  
  if ( isset($configSettings) && $configSettings->IsPhoneLogin === true) {
    if ($config->get('ciam_check_phone_no_availability') != '' && $config->get('ciam_check_phone_no_availability') != 'false') {
      $my_settings['existPhoneNumber'] = (boolean) $config->get('ciam_check_phone_no_availability');
    }
    if ($config->get('ciam_welcome_sms_template') != '') {
      $my_settings['smsTemplateWelcome'] = $config->get('ciam_welcome_sms_template');
    }
    if ($config->get('ciam_sms_template_phone_verification') != '') {
      $my_settings['smsTemplatePhoneVerification'] = $config->get('ciam_sms_template_phone_verification');
    }
    if ($config->get('ciam_sms_template_reset_password') != '') {
      $my_settings['smsTemplateForgot'] = $config->get('ciam_sms_template_reset_password');
    }
    if ($config->get('ciam_sms_template_change_phone_no') != '') {
      $my_settings['smsTemplateChangePhoneNo'] = $config->get('ciam_sms_template_change_phone_no');
    }
    if ($config->get('ciam_instant_otp_login') != '' && $config->get('ciam_instant_otp_login') != 'false') {
      $my_settings['instantOTPLogin'] = (boolean) $config->get('ciam_instant_otp_login');
    }
    if ($config->get('ciam_sms_template_one_time_passcode') != '') {
      $my_settings['smsTemplateInstantOTPLogin'] = $config->get('ciam_sms_template_one_time_passcode');
    }
  }


  $sott = '';
  if ($register_route) {
    $sott = lr_ciam_get_sott($config->get('api_key'));
  }
  $my_settings['sott'] = $sott;


  $error_level = '';
  $error_level = \Drupal::config('system.logging')->get('error_level');
  if ($error_level == 'all' || $error_level == 'verbose') {
    $my_settings['debugMode'] = true;
  }
  if ($config->get('ciam_instant_link_login') != '' && $config->get('ciam_instant_link_login') != 'false') {
    $my_settings['instantLinkLogin'] = (boolean) $config->get('ciam_instant_link_login');
  }
  if ($config->get('ciam_instant_link_login_email_template') != '') {
    $my_settings['instantLinkLoginEmailTemplate'] = $config->get('ciam_instant_link_login_email_template');
  }
  if ($config->get('ciam_registation_form_schema') != '') {
    $my_settings['registrationSchema'] = json_decode($config->get('ciam_registation_form_schema'));
  }
   
  $my_settings['commonMessages'] = '{
    "SOCIAL_LOGIN_MSG": "'.SOCIAL_LOGIN_MSG.'",
    "LOGIN_BY_EMAIL_MSG": "'.LOGIN_BY_EMAIL_MSG.'",
    "REGISTRATION_SUCCESS_MSG": "'.REGISTRATION_SUCCESS_MSG.'",
    "FORGOT_PASSWORD_MSG": "'.FORGOT_PASSWORD_MSG.'",
    "VERIFICATION_OTP_SEND_ON_EMAIL_MSG": "'.VERIFICATION_OTP_SEND_ON_EMAIL_MSG.'",
    "FORGOT_PASSWORD_SUCCESS_MSG": "'.FORGOT_PASSWORD_SUCCESS_MSG.'",
    "TWO_FA_ENABLED_MSG": "'.TWO_FA_ENABLED_MSG.'",
    "TWO_FA_DISABLED_MSG": "'.TWO_FA_DISABLED_MSG.'",
    "OTP_SEND_ON_PHONE_SUCCESS_MSG": "'.OTP_SEND_ON_PHONE_SUCCESS_MSG.'",
    "UPDATE_PHONE_SUCCESS_MSG": "'.UPDATE_PHONE_SUCCESS_MSG.'",
    "EMAIL_VERIFICATION_SUCCESS_MSG": "'.EMAIL_VERIFICATION_SUCCESS_MSG.'",
    "CHANGE_PASSWORD_SUCCESS_MSG": "'.CHANGE_PASSWORD_SUCCESS_MSG.'",
    "ACCOUNT_LINKING_MSG": "'.ACCOUNT_LINKING_MSG.'",
    "ACCOUNT_UNLINKING_MSG": "'.ACCOUNT_UNLINKING_MSG.'",
    "ADD_EMAIL_MSG": "'.ADD_EMAIL_MSG.'",
    "REMOVE_EMAIL_MSG": "'.REMOVE_EMAIL_MSG.'",
    "UPDATE_USER_PROFILE": "'.UPDATE_USER_PROFILE.'" 
  }';

  if ($config->get('ciam_custom_options') != '') {
    $my_settings['customScript'] = "";
    $jsondata = lr_ciam_json_validate($config->get('ciam_custom_options'));
    if (is_object($jsondata)) {
      foreach ($jsondata as $key => $value) {
        $my_settings['customScript'] .= "commonOptions." . $key . "=";
        if (is_object($value) || is_array($value)) {
          $encodedStr = json_encode($value);
          $my_settings['customScript'] .= $encodedStr . ';';
        }
        else {
          $my_settings['customScript'] .= '"' . $value . '"' . ';';
        }
      }
    }
    else {
      if (is_string($jsondata)) {
        $my_settings['customScript'] = $jsondata;
      }
    }
  }


  $page['#attached']['drupalSettings']['ciam'] = $my_settings;
  $page['#attached']['library'][] = 'lr_ciam/drupal.ciam_core';

  if($loggedIn === TRUE){
    $user = \Drupal::currentUser();
    $current_alias = \Drupal::service('path.current')->getPath();
    if ($current_alias == '/user/' . $user->id() || $current_alias == '/user/' . $user->id() . '/edit' || $current_alias == '/user/' . $user->id() . '/changepassword') {
     $page['#attached']['library'][] = 'lr_ciam/drupal.ciam_custom';
    }
  }
}

/**
 * Generate SOTT.
 *
 * @param $apiKey
 *
 * @return json|string
 */
function lr_ciam_get_sott($apiKey) {
  if (isset($apiKey) && $apiKey != '') {
    
    \Drupal::service('page_cache_kill_switch')->trigger();

    try {
      $sottObject = new SottAPI();
      $result = $sottObject->generateSOTT('20'); 
      return isset($result->Sott) ? $result->Sott : '';
    }
    catch (LoginRadiusException $e) {
      \Drupal::logger('ciam')->error($e);
    }
  }
}

/**
 * Check String is json or not.
 *
 * @param $string
 *
 * @return json|string
 */
function lr_ciam_json_validate($string) {
  $result = json_decode(str_replace("'", '"', $string));
  if (json_last_error() == JSON_ERROR_NONE) {
    return $result;
  }
  else {
    return $string;
  }
}

/**
 * Implements hook_mail().
 */
function lr_ciam_mail($key, &$message, $params) {
  $data['user'] = $params['account'];
  $options['langcode'] = $message['langcode'];  
  $variables = [
    '@site' => \Drupal::config('system.site')
      ->get('name'),
    '@username' =>  $data['user']
      ->getDisplayName(),
  ];
  user_mail_tokens($variables, $data, $options);
  switch ($key) {
    case 'welcome_email':
      $message['subject'] = t('Thank you for registering at @site', $variables, $options);
      $message['body'][] = t("Thank you for registering at @site.

You will be able to login in the future using

Username : @username
Password : @pass

--  [site:name] team", $variables, $options);
      break;
  }
}

/**
 * Get Callback Url For Social Login Interface.
 *
 * @return string
 */
function lr_ciam_get_callback_url() {
  global $base_url;
  $destination = (\Drupal::destination()->getAsArray());
  $callback = $destination['destination'];
  \Drupal::service('page_cache_kill_switch')->trigger();
  if (strpos($callback, 'ajax') !== FALSE) {
    $callback = Url::fromRoute('user');
  }

  $url = Url::fromUserInput('/user/ciamlogin', [
    'query' => ['destination' => $callback],
    'absolute' => TRUE,
  ])->toString();

  $request_uri = \Drupal::request()->getRequestUri();
  if (strpos($request_uri, 'redirect_to') !== FALSE) {
    $vid = \Drupal::request()->query->get('redirect_to');
    $url .= "&redirect_to=" . urldecode($vid);
  }
  $parse_url = parse_url($base_url);
  $http_referer = isset($_SERVER["HTTP_REFERER"]) ? $_SERVER["HTTP_REFERER"] : '';
  if (\Drupal::currentUser()->isAuthenticated() && isset($parse_url['host']) && !empty($parse_url['host']) && (strpos($http_referer, $parse_url['host']) !== FALSE)) {
    \Drupal::service('session')->set('referer_url', $_SERVER["HTTP_REFERER"]);
  }

  return urlencode($url);
}

/**
 * Update user data after save.
 *
 * @param userid $user
 * @param object $userprofile
 */
function lr_ciam_add_user_data_after_save($user, $userprofile) {
  $user_manager = \Drupal::service('lr_ciam.user_manager');
  $user_manager->lrCiamUpdateUserTable($userprofile->Uid, $user->id());
}


/**
 * Implements hook_user_insert().
 */
function lr_ciam_user_insert($account) {
  $post_value = \Drupal::request()->request->all();
  $user = \Drupal::currentUser()->getRoles();
  if (in_array("administrator", $user)) {

    if (isset($post_value['op']) && $post_value['op'] == 'Create new account') {
      $user_manager = \Drupal::service('lr_ciam.user_manager');
      $params = '{
            "Email":[
               {
                 "Type":"Primary",
                 "Value":"' . $post_value['mail'] . '"
               }
            ],
            "UserName":"' . $post_value['name'] . '",
            "Password":"' . $post_value['pass']['pass1'] . '"
            }';

      $response = $user_manager->lrCiamCreateUser($params);
      if (isset($response->Uid) && !empty($response->Uid)) {

        Database::getConnection()->update('users_field_data')->fields([
          'login' => \Drupal::time()->getRequestTime(),
        ])
          ->condition('uid', $account->id())
          ->execute();
        $user_manager->lrCiamUpdateUserTable($response->Uid, $account->id());

        
        if (isset($post_value['notify']) && $post_value['notify'] == '1') {
          try {
            $forgotVerificationUrl = Url::fromRoute('user.login')->setAbsolute()->toString();
            $result = $user_manager->lrCiamForgotPassword(trim((string) $post_value['mail']), $forgotVerificationUrl);
 
            if (isset($result->IsPosted) && $result->IsPosted) {
              \Drupal::messenger()->addStatus(t('A welcome message with further instructions has been emailed to the new user <a href=":url">%name</a>.', [':url' => $account->url(), '%name' => $post_value['name']]));
            }
          }
          catch (LoginRadiusException $e) {     
            $msg = isset($e->getErrorResponse()->Description) ? $e->getErrorResponse()->Description : 'error';
            \Drupal::messenger()->addError($msg);
            $response = new RedirectResponse(Url::fromRoute('<current>')->toString());
            $response->send();
            exit();
          }
        }
        if (isset($post_value['status']) && $post_value['status'] == "0") {
          $user_manager->lrCiamBlockUser($response->Uid);
        }
      }
    }
  }
}

/**
 * Implements hook_user_presave().
 */
function lr_ciam_user_presave($account) {
  $post_value = \Drupal::request()->request->all();
  $user_manager = \Drupal::service('lr_ciam.user_manager');
  $ciam_uid = $user_manager->lrCiamGetCiamUid($account->id());
  $ciam_uname = $user_manager->lrCiamGetCiamUname($account->id());
  
  if (isset($post_value['op']) && $post_value['op'] == 'Save') {
    if (isset($post_value['form_id']) && $post_value['form_id'] == 'user_form') {
      if (isset($post_value['name']) && $post_value['name'] != '') {

        if ($ciam_uname != $post_value['name']) {
          $params = '{            
                      "UserName":"' . $post_value['name'] . '"           
                    }';
          try {
            $accountObject = new AccountAPI();
            $accountObject->updateAccountByUid($params, $ciam_uid);
          }
          catch (LoginRadiusException $e) {
            $msg = isset($e->getErrorResponse()->Description) ? $e->getErrorResponse()->Description : 'error';
            \Drupal::messenger()->addError($msg);
            $response = new RedirectResponse(Url::fromRoute('<current>')->toString());
            $response->send();
            exit();
          }
        }
      }
    }
  }
}

/**
 * Implements hook_user_update().
 */
function lr_ciam_user_update($account) {
  $post_value = \Drupal::request()->request->all();
  $config = \Drupal::config('lr_ciam.settings');
    
  $user_manager = \Drupal::service('lr_ciam.user_manager');
  $ciam_uid = $user_manager->lrCiamGetCiamUid($account->id());
  $field_defaults = $config->get('user_fields', []);
  if (isset($post_value['op']) && $post_value['op'] == 'Save') {
    $output = [];

    if (!empty($field_defaults)) {
      foreach ($field_defaults as $key => $value) {
        if ($value == 'BirthDate') {
          $output[$value] = isset($post_value[$key][0]["value"]['date']) ? $post_value[$key][0]["value"]['date'] : '';
          $sldate = explode('-', $output[$value]);
          $year = isset($sldate[0]) ? trim((string) $sldate[0]) : '';
          $month = isset($sldate[1]) ? trim((string) $sldate[1]) : '';
          $date = isset($sldate[2]) ? trim((string) $sldate[2]) : '';
          $formatDate = trim((string) $month . '-' . $date . '-' . $year);
          $output[$value] = $formatDate;
        }
        else {
          $output[$value] = isset($post_value[$key][0]["value"]) ? $post_value[$key][0]["value"] : '';
        }
      }
    }

    try {
      $accountObject = new AccountAPI();
      $accountObject->updateAccountByUid($output, $ciam_uid);
    }
    catch (LoginRadiusException $e) {

    }

    if (isset($post_value['status'])) {
      if ($post_value['status'] == "0" && isset($ciam_uid) && !empty($ciam_uid)) {
        $user_manager->lrCiamBlockUser($ciam_uid);
      }
      else {
        $user_manager->lrCiamUnblockUser($ciam_uid);
      }
    }
    if (isset($post_value['pass']['pass1']) && !empty($post_value['pass']['pass1'])) {
      $user = \Drupal::currentUser()->getRoles();
      if (in_array("administrator", $user)) {
        if (empty($ciam_uid)) {
          $params = '{
            "Email":[
               {
                  "Type":"Primary",
                  "Value":"' . $account->getEmail() . '"
               }
            ],
            "UserName":"' . $account->getUsername() . '",
            "Password":"' . $post_value['pass']['pass1'] . '"
            }';
          $user_manager->lrCiamCreateUser($params);
          return;
        }
        else {
          $user_manager->lrCiamSetPassword($ciam_uid, $post_value['pass']['pass1']);
        }
      }
    }
  }
  elseif (isset($post_value['op']) && $post_value['op'] == 'Apply' && isset($ciam_uid) && !empty($ciam_uid)) {

    if (isset($post_value['action']) && $post_value['action'] == 'user_block_user_action') {
      $user_manager->lrCiamBlockUser($ciam_uid);
    }
    elseif (isset($post_value['action']) && $post_value['action'] == 'user_unblock_user_action') {
      $user_manager->lrCiamUnblockUser($ciam_uid);
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_view_alter() for user entities.
 */
function lr_ciam_user_view_alter(array &$build, UserInterface $account, EntityViewDisplayInterface $display) {
  $user = \Drupal::currentUser()->getRoles();
  if (!in_array("administrator", $user) && !\Drupal::currentUser()->isAnonymous()) {
  $accountObject = new AccountAPI();
  $userProfileUid = \Drupal::service('session')->get('user_profile_uid', []);

  if(!empty($userProfileUid)){
    try {
      $userprofile = $accountObject->getAccountProfileByUid($userProfileUid);  
    }
    catch (LoginRadiusException $e) {
      \Drupal::logger('ciam')->error($e);
    }
  }

  $config = \Drupal::config('lr_ciam.settings');    
  $user_manager = \Drupal::service('lr_ciam.user_manager');

  $field_map = $config->get('user_fields'); 
  $field_convert_info = $user_manager->fieldFieldConvertInfo();

  $entity_type = 'user';
  $instances = [];
  foreach (\Drupal::service('entity_field.manager')
    ->getFieldDefinitions($entity_type, 'user') as $field_name => $field_definition) {
    $user_bundle = $field_definition->getTargetBundle();

    if (!empty($user_bundle)) {
      $instances[$field_name]['type'] = $field_definition->getType();
      $instances[$field_name]['label'] = $field_definition->getLabel();
    }
  }
  
  foreach ($instances as $field_name => $instance) {
    $field = FieldStorageConfig::loadByName($entity_type, $field_name);

    if (isset($field_map[$field_name]) && isset($field_convert_info[$field->getType()]['callback'])) {
      $callback = $field_convert_info[$field->getType()]['callback'];
      $field_property_name = $field_map[$field_name];  

      if($field_property_name == "PhoneID"){
        $field_property_name = "PhoneId";
      }
  
 
      if ($value = $user_manager->$callback($field_property_name, $userprofile, $field, $instance)) {
   
        if (False) {
          $drupal_user_ref[$field_name]['widget']['0']['value']['#default_value'] = isset($value['value']) ? $value['value'] : $value;
        }
        else {      

          $field = explode("field_", $field_name);
          $fieldarray = explode("_", $field[1]);

          if(is_array($fieldarray)) {
            $fieldName = (isset($fieldarray[0]) ? $fieldarray[0] : '') .''.(isset($fieldarray[1]) ? $fieldarray[1] : '');              
              $build[$fieldName] = [
                '#type' => 'item',
                '#markup' => '<h4 class="label">' . t(ucfirst($fieldName)) . '</h4> '.$value['value'],
              ];            
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lr_ciam_form_user_form_alter(&$form, FormStateInterface $form_state) {
  $config = \Drupal::config('lr_ciam.settings');
  $user = \Drupal::currentUser()->getRoles();
 
if (!in_array("administrator", $user) && !\Drupal::currentUser()->isAnonymous()) {
    unset($form['#validate'][1]);
    unset($form['account']['pass']);
    unset($form['account']['current_pass']);
    $form['account']['mail']['#disabled'] = TRUE;
     
    $socialObject = new SocialAPI();
    $accountObject = new AccountAPI();
    $mfaObject = new MultiFactorAuthenticationAPI();
    
    try {
      $res = $socialObject->validateAccessToken(trim((string) \Drupal::service('session')->get('access_token', [])));   

      if (isset($res->errorCode) && $res->errorCode == '906') {
        $domain = Url::fromRoute('<front>')->setAbsolute()->toString();
        $redirectUrl = $domain . 'user/logout';
        $response = new TrustedRedirectResponse($redirectUrl);
        \Drupal::logger('ciam')->error($res->description);
        return $response->send();
      }
    }
    catch (LoginRadiusException $e) {
      $domain = Url::fromRoute('<front>')->setAbsolute()->toString();
      $redirectUrl = $domain . 'user/logout';
      $response = new TrustedRedirectResponse($redirectUrl);
      \Drupal::logger('ciam')->error($e);
      return $response->send();
    }
    $userProfileUid = \Drupal::service('session')->get('user_profile_uid', []);
    try {
      $result = $accountObject->getAccountProfileByUid($userProfileUid);      
    }
    catch (LoginRadiusException $e) {
       \Drupal::logger('ciam')->error($e);
    }

    if (isset($_COOKIE['lr_profile_update']) && $_COOKIE['lr_profile_update'] != '') {

      $user_manager = \Drupal::service('lr_ciam.user_manager');  
      $uid = $user_manager->checkProviderId($result->ID);
      $user_name = $user_manager->getUserNameOnUpdateProfile($result);
      $ciam_save_username_in_db = $config->get('ciam_save_name_in_db');
 
     if ($form['account']['name']['#default_value'] != $user_name['username']) {
       try {
        \Drupal::database()->update('users_field_data')
          ->fields(['name' => ($ciam_save_username_in_db == 'false') ? $result->ID : $user_name['username']])
          ->condition('uid', $uid)
          ->execute();
      }
      catch (Exception $e) {
        \Drupal::logger('ciam')->error($e);
      }
     }
 
      setcookie("lr_profile_update", "", time() - 3600, "/");

      $uid = $user_manager->checkProviderId($result->ID);
      $user_manager->fieldUpdateUserObject($uid, $result);      
    }

    $ciam_save_mail_in_db = $config->get('ciam_save_mail_in_db');
    $defaultEmail = isset($result->Email) ? $result->Email[0]->Value : '';
    if ($ciam_save_mail_in_db == 'true' && isset($defaultEmail) && $defaultEmail != '') {
      if ($form['account']['mail']['#default_value'] != $defaultEmail) {
        \Drupal::database()->update('users_field_data')
          ->condition('mail', $form['account']['mail']['#default_value'])
          ->fields(['mail' => $defaultEmail, 'init' => $defaultEmail])
          ->execute();
      }
    }



    if(isset($defaultEmail) && $defaultEmail != '') {
      $form['account']['mail']['#default_value'] = $defaultEmail;
    }
    $form['account']['files[user_picture_0]']['#default_value'] = isset($result->ImageUrl) ? $result->ImageUrl : '';
    $form['lr_profile_editor'] = [
      '#type' => 'item',
      '#theme' => 'lr_profile_editor',
      '#attributes' => ['class' => ['lr-profileeditor-container']],
      '#weight' => -15,
      '#open' => TRUE,
    ];

    $form['lr_update_phone'] = [
      '#type' => 'item',
      '#theme' => 'lr_update_phone',
      '#attributes' => ['class' => ['lr-phone-container']],
      '#weight' => -15,
      '#open' => TRUE,
    ];

    $form['lr_message'] = [
      '#type' => 'item',
      '#theme' => 'lr_message',
      '#attributes' => ['class' => ['lr-message-container']],
      '#weight' => -30,
      '#open' => TRUE,
    ];

    if (isset($result->PhoneId) && $result->PhoneId != '') {
      $form['account_phone'] = [
        '#type'   => 'container',
        '#weight' => -15,
      ];
      $form['account_phone']['phoneid'] = [
        '#type' => 'textfield',
        '#title' => t('Phone ID'),
        '#attributes' => ['readonly' => 'readonly'],
        '#description' => t('A valid phone number.'),
        '#default_value' => $result->PhoneId,
      ];
    }

    $configSettings = lr_ciam_get_config_option();

    if (isset($result->Email) && count($result->Email) > 0 && $configSettings->EmailVerificationFlow != 'disabled') {
      $form['account']['emailSetting'] = [
        '#type' => 'fieldset',
        '#title' => t('Email Settings'),
        '#collapsible' => TRUE,
        '#collapsed' => TRUE,
      ];

      $header = [
        'email' => ['data' => 'Email'],
        'action' => ['data' => 'Action'],
      ];

      $form['account']['emailSetting']['add'] = [
        '#type' => 'item',
        '#markup' => '<div class="addEmail" id="addEmail">Add Email</div>',
      ];

      for ($i = 0; $i < count($result->Email); $i++) {
        $email[$i] = [
          '#type' => 'email',
          '#attributes' => ['readonly' => 'readonly'],
          '#default_value' => ($result->Email[$i]->Value ? $result->Email[$i]->Value : ''),
        ];

        $action[$i] = [
          '#type' => 'item',
          '#markup' => '<div class="removeEmail" id="removeEmail_' . $i . '">Remove</div>',
        ];

        $rows['customize_field_' . $i] = [
          'data' => [
            'field' => ['data' => &$email[$i]],
            'label' => ['data' => &$action[$i]],
          ],
        ];

        $data_to_send['customize_field_' . $i] = [
          'field' => &$email[$i],
          'label' => &$action[$i],
        ];
      }

      $form['account']['emailSetting']['table'] = [
        '#tree' => TRUE,
        '#theme' => 'table',
        '#header' => $header,
        'values' => $data_to_send,
        '#rows' => &$rows,
      ];

      $form['add_email'] = [
        '#type' => 'item',
        '#theme' => 'add_email',
        '#attributes' => ['class' => ['add-email']],
        '#weight' => -20,
        '#open' => TRUE,
      ];

      $form['remove_email'] = [
        '#type' => 'item',
        '#theme' => 'remove_email',
        '#attributes' => ['class' => ['remove-email']],
        '#weight' => -20,
        '#open' => TRUE,
      ];
    }
    $form['account']['current_pass_required_value']['#access'] = FALSE;
    $form['account']['current_pass']['#access'] = FALSE;

    
    if (isset($configSettings->TwoFactorAuthentication) && $configSettings->TwoFactorAuthentication->IsEnabled) {
      $authenticationAPI = new AuthenticationAPI();
      try {
        $userProfileData = $authenticationAPI->getProfileByAccessToken(trim((string) \Drupal::service('session')->get('access_token', [])),'Provider');
      }
      catch (LoginRadiusException $e) {
        \Drupal::logger('ciam')->error($e);
      }

      if ($userProfileData->Provider == 'Email') {
        $form['lr_2fa_container'] = [
          '#type' => 'item',
          '#theme' => '2fa_container',
          '#attributes' => ['class' => ['lr-2fa-container']],
          '#weight' => -25,
          '#open' => TRUE,
        ];
      }

      try {
        $isEnabled = $mfaObject->mfaConfigureByAccessToken(\Drupal::service('session')->get('access_token', []));
      }
      catch (LoginRadiusException $e) {
        \Drupal::logger('ciam')->error($e);
      }

      if ((isset($isEnabled->IsGoogleAuthenticatorVerified) && $isEnabled->IsGoogleAuthenticatorVerified) || (isset($isEnabled->IsOTPAuthenticatorVerified) && $isEnabled->IsOTPAuthenticatorVerified)) {
        $form['lr_2fa_backup'] = [
          '#type' => 'details',
          '#title' => 'Backup Codes List',
          '#theme' => 'lr_backup_codes',
          '#attributes' => ['class' => ['lr_2fa_backup']],
          '#weight' => -21,
          '#open' => TRUE,
        ];
      }
    }
    $emailVerified = \Drupal::service('session')->get('emailVerified', []);    
    if (isset($emailVerified) && $emailVerified) {
      $form['lr_ciam_linked'] = [
        '#type' => 'details',
        '#title' => 'Account Linking',
        '#theme' => 'lr_ciam_linked',
        '#attributes' => ['class' => ['lr-ciam-linked']],
        '#weight' => -20,
        '#open' => TRUE,
      ];
    }
  }
  return $form;
}

/**
 * Implements hook_user_format_name_alter().
 */
function lr_ciam_user_format_name_alter(&$name, AccountInterface $account) {

    if (!\Drupal::currentUser()->isAnonymous()) {

      // If Login Radius name is used as Drupal user name, we
      // don't need to look it up.
      if (empty(\Drupal::config('lr_ciam.settings')->get('ciam_dont_save_name_in_db'))) {
        return;
      }

		$userFullName = \Drupal::service('session')->get('user_profile_fullName', []);
      if (!empty($userFullName)) {
        $name = $userFullName;
      }

    }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function lr_ciam_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() == 'user') {
    $constraints = $fields['mail']->getConstraints();
    unset($constraints['ProtectedUserField']);
    $fields['mail']->setConstraints($constraints);

    $constraints = $fields['pass']->getConstraints();
    unset($constraints['ProtectedUserField']);
    $fields['pass']->setConstraints($constraints);
  }
}

/**
 * Delete user.
 *
 * @param object $account
 */
function lr_ciam_user_predelete($account) {
  $config = \Drupal::config('lr_ciam.settings');
  $ciam_delete_lr_useraccount = $config->get('ciam_delete_lr_useraccount');
  $user_manager = \Drupal::service('lr_ciam.user_manager');
  $ciam_uid = $user_manager->lrCiamGetCiamUid($account->id());
  if($ciam_delete_lr_useraccount=='true'){
    $user_manager->userDelete($ciam_uid);
   }
  $user_manager->deleteMapUser($account->id());
}

/**
 * Implements hook_mail_alter().
 */
function lr_ciam_mail_alter(&$message) {
  if ($message['key'] == 'register_admin_created') {
    $message['send'] = FALSE;
  }
  if ($message['key'] == 'password_reset') {
    $message['send'] = FALSE;
  }
}

/**
 * Unset options when Identity Experience Framework enable.
 */
function lr_ciam_form_advanced_settings_alter(&$form, FormStateInterface $form_state) {
  $ief_config = \Drupal::config('lr_ief.settings');

  if ($ief_config->get('lr_ief_enable') == '1') {
    unset($form['lr_user_settings']);
    unset($form['lr_template_settings']);
    unset($form['lr_field_mapping']);
  }
  return $form;
}

/**
 * Add authentication variable in database.
 */
function lr_ciam_add_extra_config_settings() {
  return ['ciam_prompt_password_on_social_login', 'ciam_user_name_login', 'ciam_ask_email_for_unverified_user_login', 'ciam_ask_required_fields_on_traditional_login',
    'ciam_welcome_email_template', 'ciam_email_verification_template', 'ciam_reset_password_email_template', 'ciam_sms_template_2fa', 'ciam_check_phone_no_availability',
    'ciam_welcome_sms_template', 'ciam_sms_template_phone_verification','ciam_sms_template_reset_password','ciam_sms_template_change_phone_no',
  ];
}

/**
 * Add advanced variable in database.
 */
function lr_ciam_add_advance_config_settings() {
  return ['ciam_instant_link_login', 'ciam_instant_link_login_email_template', 'ciam_instant_otp_login', 'ciam_sms_template_one_time_passcode',
    'ciam_display_password_strength', 'ciam_notification_timeout_setting', 'ciam_save_mail_in_db', 'ciam_save_name_in_db', 'ciam_delete_lr_useraccount','ciam_terms_and_condition_html',
    'ciam_custom_options', 'ciam_registation_form_schema',
  ];
}

/**
 * Get configurations from config API.
 *
 */
function lr_ciam_get_config_option() {
  try {
    $configObject = new ConfigurationAPI();
    return $configObject->getConfigurations();
  }
  catch (LoginRadiusException $e) {
    \Drupal::logger('ciam')->error($e);
  }
}



/**
 * Validate LoginRadius API Credentials.
 *
 * @param string $apiKey
 * @param string $apiSecret
 */
function lr_ciam_get_authentication($apiKey, $apiSecret) {
  if (isset($apiKey)) {
    $data = [];
    try {      
     
      $resourcePath = 'https://api.loginradius.com/api/v2/app/validate';    
      $queryParam = [];      
      $queryParam['apiKey'] = $apiKey;
      $queryParam['apiSecret'] = $apiSecret;
      $result = Functions::_apiClientHandler('GET', $resourcePath, $queryParam);
      if (empty($result)) {
        $data['message'] = t('Please check your php.ini settings to enable CURL or FSOCKOPEN');
        $data['status'] = 'error';
      }

      elseif (isset($result->Status) && !$result->Status) {
        $error = [
          "API_KEY_NOT_VALID" => "LoginRadius API key is invalid. Get your LoginRadius API key from LoginRadius account",
          "API_SECRET_NOT_VALID" => "LoginRadius API Secret is invalid. Get your LoginRadius API Secret from LoginRadius account",
          "API_KEY_NOT_FORMATED" => "LoginRadius API Key is not formatted correctly",
          "API_SECRET_NOT_FORMATED" => "LoginRadius API Secret is not formatted correctly",
        ];

        foreach ($result->Messages as $value) {
          $data['message'] = $error["$value"];
          $data['status'] = 'error';
          break;
        }
      }
      return $data;
    }

    catch (LoginRadiusException $e) {
      $data['message'] = t("Something went wrong, check your credentials.");
      $data['status'] = 'error';
      return $data;
    }
  }
}

/**
 * Get configurations list from lr side.
 *
 * @param string $apiKey
 */
function lr_ciam_get_configuration($apiKey) {
  if (isset($apiKey)) {
    $res = [];
    try {
      $resourcePath = '/ciam/appinfo';
      $queryParam = [];      
      $queryParam['apiKey'] = $apiKey;      
      $result = Functions::_apiClientHandler('GET', $resourcePath, $queryParam);
       
      if (empty($result)) {
        $res['response'] = '';
      }else{
        $res['response'] = $result;
      }      
      return $res;
    }
    catch (LoginRadiusException $e) {
      \Drupal::logger('ciam')->error($e);
    }
  }
}

/**
 * Implements hook_user_delete().
 */
function lr_ciam_user_delete($account) {
  $user_manager = \Drupal::service('lr_ciam.user_manager');
  $user_manager->deleteMapUser($account->id());
}
